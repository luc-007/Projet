services:
  nginx:
    build: ./proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_content:/var/www/html  # Pour servir les fichiers statiques
      - media_content:/var/www/media # For serving media files
    depends_on:
      client:
        condition: service_healthy
      server:
        condition: service_healthy
    networks: # Nginx also needs to be on the backend network to reach server and client by service name
      - backend

  client:
    build: ./client
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks: # Client also needs to be on the backend network if nginx proxies to it by service name 'client'
      - backend

  server:
    build: ./server
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8000/api/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5 # Server might take longer to start
    expose:
      - "8000"
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY
      - DJANGO_DEBUG
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_content:/app/staticfiles  # Montage du mÃªme volume
      - media_content:/app/mediafiles   # Mount for media files
    command: gunicorn --bind 0.0.0.0:8000 server_config.wsgi:application
    networks: # Added server to the backend network
      - backend

  db:
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
    depends_on:
      - server

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - backend
    depends_on:
      - prometheus

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  grafana_data:
  static_content: {}
  media_content: {}